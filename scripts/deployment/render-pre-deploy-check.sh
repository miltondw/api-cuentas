#!/bin/bash

# Verificaci√≥n previa al despliegue en Render
# Este script comprueba que todo est√© correctamente configurado para el despliegue en Render

echo "üîç Iniciando verificaci√≥n previa al despliegue en Render..."

# Verificar archivo package.json
echo "üì¶ Verificando package.json..."
if [ ! -f "package.json" ]; then
  echo "‚ùå ERROR: No se encuentra package.json"
  exit 1
fi

# Verificar scripts necesarios
echo "üîç Verificando scripts en package.json..."
REQUIRED_SCRIPTS=("build" "start" "start:prod")
MISSING_SCRIPTS=()

for script in "${REQUIRED_SCRIPTS[@]}"; do
  if ! grep -q "\"$script\":" package.json; then
    MISSING_SCRIPTS+=("$script")
  fi
done

if [ ${#MISSING_SCRIPTS[@]} -gt 0 ]; then
  echo "‚ùå ERROR: Faltan los siguientes scripts en package.json: ${MISSING_SCRIPTS[*]}"
  exit 1
else
  echo "‚úÖ Todos los scripts necesarios est√°n definidos"
fi

# Verificar dependencias de NestJS
echo "üìö Verificando dependencias de NestJS..."
if ! grep -q "\"@nestjs/core\":" package.json; then
  echo "‚ùå ERROR: No se encuentra @nestjs/core en las dependencias"
  exit 1
fi

# Verificar script de construcci√≥n de Render
echo "üõ†Ô∏è Verificando script de construcci√≥n para Render..."
RENDER_BUILD_SCRIPT="scripts/deployment/render-build.sh"
if [ ! -f "$RENDER_BUILD_SCRIPT" ]; then
  echo "‚ùå ERROR: No se encuentra el script $RENDER_BUILD_SCRIPT"
  exit 1
fi

# Verificar permisos de ejecuci√≥n
if [ ! -x "$RENDER_BUILD_SCRIPT" ]; then
  echo "‚ö†Ô∏è ADVERTENCIA: El script $RENDER_BUILD_SCRIPT no tiene permisos de ejecuci√≥n"
  echo "üîß Aplicando permisos de ejecuci√≥n..."
  chmod +x "$RENDER_BUILD_SCRIPT"
  echo "‚úÖ Permisos aplicados"
fi

# Verificar problemas en el c√≥digo TypeScript
echo "üîç Verificando posibles problemas de TypeScript..."
TS_FILES_WITH_AUTHENTICATEDREQUEST=$(grep -l "AuthenticatedRequest" --include="*.ts" -r src)

if [ -n "$TS_FILES_WITH_AUTHENTICATEDREQUEST" ]; then
  echo "‚ÑπÔ∏è Archivos que usan AuthenticatedRequest:"
  echo "$TS_FILES_WITH_AUTHENTICATEDREQUEST"
  
  for file in $TS_FILES_WITH_AUTHENTICATEDREQUEST; do
    if grep -q "req\.headers" "$file"; then
      echo "‚ö†Ô∏è ADVERTENCIA: El archivo $file usa 'req.headers' con AuthenticatedRequest"
      echo "   Esto puede causar errores de compilaci√≥n en Render"
    fi
  done
fi

# Verificar configuraci√≥n de Render.yaml
echo "üìÑ Verificando configuraci√≥n de Render..."
if [ ! -f "render.yaml" ]; then
  echo "‚ö†Ô∏è ADVERTENCIA: No se encuentra render.yaml. Render usar√° la configuraci√≥n predeterminada."
else
  echo "‚úÖ render.yaml encontrado"
  
  # Verificar el nombre del servicio
  if ! grep -q "name:" render.yaml; then
    echo "‚ö†Ô∏è ADVERTENCIA: No se ha definido un nombre de servicio en render.yaml"
  fi
  
  # Verificar el comando de inicio
  if ! grep -q "startCommand:" render.yaml; then
    echo "‚ö†Ô∏è ADVERTENCIA: No se ha definido un comando de inicio en render.yaml"
  fi
fi

# Verificar variables de entorno necesarias
echo "üîê Verificando variables de entorno cr√≠ticas..."
ENV_VARS=("DATABASE_URL" "JWT_SECRET" "PORT")
MISSING_ENV=()

for var in "${ENV_VARS[@]}"; do
  if ! grep -q "$var" .env* 2>/dev/null && ! grep -q "$var" render.yaml 2>/dev/null; then
    MISSING_ENV+=("$var")
  fi
done

if [ ${#MISSING_ENV[@]} -gt 0 ]; then
  echo "‚ö†Ô∏è ADVERTENCIA: Las siguientes variables de entorno podr√≠an faltar: ${MISSING_ENV[*]}"
  echo "   Aseg√∫rate de que est√©n configuradas en el panel de Render."
fi

# Ejecutar compilaci√≥n de prueba
echo "üß™ Ejecutando compilaci√≥n de prueba..."
npm run build

if [ $? -eq 0 ]; then
  echo "‚úÖ Compilaci√≥n exitosa"
else
  echo "‚ùå ERROR: La compilaci√≥n fall√≥. Corrige los errores antes de desplegar."
  exit 1
fi

echo "‚úÖ VERIFICACI√ìN COMPLETA: Todo est√° listo para despliegue en Render"
echo ""
echo "‚ÑπÔ∏è PR√ìXIMOS PASOS:"
echo "1. Commit de los cambios: git add . && git commit -m \"Fix: Render deployment issues\""
echo "2. Push al repositorio: git push origin master"
echo "3. Verificar el despliegue en el panel de Render"
